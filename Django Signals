Question 1: By default are django signals executed synchronously or asynchronously? 
By default, Django signals are executed synchronously. This means that when a signal is sent, 
the connected receivers (handlers) are executed in the same thread and process that sent the signal, 
blocking any further execution until all receivers have completed.
#Code Snippet

#createing a simple Django app and define a signal.

from django.dispatch import receiver, Signal
import time
# Defineing a simple signal
my_signal = Signal()
# Define a receiver for the signal
@receiver(my_signal)
def my_signal_handler(sender, **kwargs):
    print("Signal handler started")
    time.sleep(2)  # Simulate a long-running task
    print("Signal handler finished")


# Now sending the signal from a view

from django.http import HttpResponse
from .signals import my_signal

def my_view(request):
    print("Before sending signal")
    my_signal.send(sender=None)
    print("After sending signal")
    return HttpResponse("Signal sent")

#When i call my_signal.send(sender=None) in my_view, the output will be:
Before sending signal
Signal handler started
After sending signal
Signal handler finished

#This shows that "After sending signal" is printed only after the signal handler completes its execution.
This confirms that the signal is processed synchronously, as the view waits for the signal handler to finish
before continuing.


###Question 2: Do django signals run in the same thread as the caller?

Yes, Django signals run in the same thread as the caller. 
This means that when a signal is sent, the receiver function is executed in the context of the thread that emitted the signal.
#Code Snippet

# models.py
from django.db import models
from django.dispatch import receiver
from django.db.models.signals import post_save
import threading

# A simple model
class MyModel(models.Model):
    name = models.CharField(max_length=100)

# Signal receiver
@receiver(post_save, sender=MyModel)
def my_signal_receiver(sender, instance, created, **kwargs):
    current_thread = threading.current_thread()
    print(f'Signal received in thread: {current_thread.name}')


def create_instance():
    current_thread = threading.current_thread()
    print(f'Creating instance in thread: {current_thread.name}')
    MyModel.objects.create(name='Test')

# Running the function
create_instance()

When I run create_instance(),  I see output indicating that both the instance creation and the signal reception occur in the same thread. 
For example
Creating instance in thread: MainThread
Signal received in thread: MainThread

This confirms that the signal receiver runs in the same thread as the caller. 

###Question 3: By default do django signals run in the same database transaction as the caller?
  Yes, by default, Django signals run in the same database transaction as the caller. 
 This means if I connect a signal to a function that makes changes to the database, those changes will be included
  in the transaction initiated by the caller.
#code snippet

from django.db import models, transaction
from django.db.models.signals import post_save
from django.dispatch import receiver


class MyModel(models.Model):
    name = models.CharField(max_length=100)


class LogEntry(models.Model):
    message = models.CharField(max_length=200)


@receiver(post_save, sender=MyModel)
def create_log_entry(sender, instance, created, **kwargs):
    if created:
        LogEntry.objects.create(message=f'Created: {instance.name}')


def create_my_model():
    with transaction.atomic():
        my_instance = MyModel.objects.create(name='Test Instance')
        # At this point, create_log_entry will be triggered
        # and will run in the same transaction.


if __name__ == '__main__':
    create_my_model()
    
    print(LogEntry.objects.count()) 


# if i run the code, If the transaction were not shared,  it ends up with a LogEntry created even 
if the creation of MyModel failed, which would not happen here.
